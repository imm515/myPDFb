name: 1cut

on:
  workflow_dispatch:
    inputs:
      work_directory:
        description: '请输入工作目录名称 (例如: cb202508)。留空将自动生成上个月目录名。'
        required: false
        type: string
      suffix:
        description: '可选后缀'
        required: false
        type: choice
        options:
          - ""        # 空（不加后缀）
          - 伙食

jobs:
  process-pdf:
    runs-on: ubuntu-latest
    env:
      WORK_DIR_FILE: "${{ secrets.PRIVATE_DIR }}/myPDF工作目录.v"
      OUTPUT_SUBDIR: "1cut"

    steps:
      # 拉取私有仓库
      - name: Checkout private repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.PRIVATE_REPO }}
          token: ${{ secrets.PAT }}
          path: private-repo
          ref: main

      # 设置工作目录并检查合法性
      - name: Set WORK_DIR and validate
        run: |
          cd private-repo

          input_dir="${{ github.event.inputs.work_directory }}"
          suffix="${{ github.event.inputs.suffix }}"

          # 生成默认目录名
          last_month=$(date -d "$(date +%Y-%m-15) -1 month" +%Y%m)
          if [ -z "$input_dir" ]; then
            work_dir_name="cb${last_month}"
          else
            work_dir_name="$input_dir"
          fi

          # 避免重复添加后缀
          if [ -n "$suffix" ] && [[ "$work_dir_name" != *"$suffix" ]]; then
            work_dir_name="${work_dir_name}${suffix}"
          fi

          # 目录名合法性检查
          if [[ ! "$work_dir_name" =~ ^cb[0-9]{6}([伙食]{0,2})?$ ]]; then
            echo "::error::目录名不合法：$work_dir_name，必须是 cbYYYYMM 或 cbYYYYMM伙食 格式"
            exit 1
          fi
          echo "::notice::最终工作目录：$work_dir_name"

          # 写入配置文件，保留注释
          today=$(date '+%Y%m%d')
          {
            echo "# 输入myPDF的工作目录 $today"
            echo "$work_dir_name"
          } > "$WORK_DIR_FILE"

          # 设置环境变量
          echo "WORK_DIR=${{ secrets.PRIVATE_DIR }}/$work_dir_name" >> $GITHUB_ENV
          echo "DEST_DIR=${{ secrets.PRIVATE_DIR }}/$work_dir_name/${{ env.OUTPUT_SUBDIR }}" >> $GITHUB_ENV

      # 检查目录是否存在（本地路径判断）
      - name: Validate directory exists locally
        run: |
          cd private-repo
          if [ ! -d "${WORK_DIR}" ]; then
            echo "::error::工作目录不存在：${WORK_DIR}，workflow 退出"
            exit 1
          fi
          echo "::notice::工作目录存在：${WORK_DIR}"

      # 安装依赖
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y poppler-utils python3-pip
          pip3 install PyMuPDF

      # 初始化输出目录
      - name: Initialize workspace
        run: |
          cd private-repo
          rm -rf "${DEST_DIR}"
          mkdir -p "${DEST_DIR}"
          echo "♻️ 已初始化输出目录 ${DEST_DIR}"

      # 列出 PDF 文件
      - name: List PDF files
        run: |
          cd private-repo
          find "${WORK_DIR}" -maxdepth 1 -name "*.pdf" | sort > pdf_files.txt
          if [ ! -s pdf_files.txt ]; then
            echo "::error::未找到 PDF 文件，请确认 ${WORK_DIR} 下存在 PDF"
            exit 1
          fi
          echo "找到 PDF 文件列表："
          cat pdf_files.txt | awk '{print substr($0,1,10) "***" substr($0,length($0)-7)}'

      # 处理 PDF
      - name: Process PDF files
        run: |
          cd private-repo
          echo "import fitz" > process_pdf.py
          echo "import os" >> process_pdf.py
          echo "import sys" >> process_pdf.py
          echo "" >> process_pdf.py
          echo "pdf_path = sys.argv[1]" >> process_pdf.py
          echo "output_dir = sys.argv[2]" >> process_pdf.py
          echo "base_name = os.path.splitext(os.path.basename(pdf_path))[0]" >> process_pdf.py
          echo "" >> process_pdf.py
          echo "doc = fitz.open(pdf_path)" >> process_pdf.py
          echo "for page_num, page in enumerate(doc, 1):" >> process_pdf.py
          echo "    w, h = page.rect.width, page.rect.height" >> process_pdf.py
          echo "    for part_name, (y0, y1) in [(\"1top\",(0,h/3)), (\"2mid\",(h/3,2*h/3)), (\"3bot\",(2*h/3,h))]:" >> process_pdf.py
          echo "        text_rect = fitz.Rect(0, y0, w, y1)" >> process_pdf.py
          echo "        text = page.get_textbox(text_rect)" >> process_pdf.py
          echo "        txt_path = f\"{output_dir}/{base_name}_p{page_num}_{part_name}.txt\"" >> process_pdf.py
          echo "        with open(txt_path,'w',encoding='utf-8') as f:" >> process_pdf.py
          echo "            f.write(text)" >> process_pdf.py
          echo "        new_doc = fitz.open()" >> process_pdf.py
          echo "        new_page = new_doc.new_page(width=w,height=(y1-y0))" >> process_pdf.py
          echo "        new_page.show_pdf_page(fitz.Rect(0,0,w,(y1-y0)), doc, page_num-1, clip=text_rect)" >> process_pdf.py
          echo "        pdf_path_out = f\"{output_dir}/{base_name}_p{page_num}_{part_name}.pdf\"" >> process_pdf.py
          echo "        new_doc.save(pdf_path_out)" >> process_pdf.py
          echo "        new_doc.close()" >> process_pdf.py
      
          # 遍历 PDF 文件处理
          mapfile -t pdf_files < pdf_files.txt
          for pdf in "${pdf_files[@]}"; do
              masked="${pdf:0:10}***${pdf: -8}"
              echo "Processing $masked"
              python3 process_pdf.py "$pdf" "${DEST_DIR}"
          done

      - name: Commit and push
        run: |
          cd private-repo
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"

          git add "${DEST_DIR}"
          git add "$WORK_DIR_FILE"

          if git diff --cached --quiet; then
            echo "✅ 没有变动，跳过提交"
          else
            git commit -m "Auto: 初始化目录并处理 PDF"
            git push
          fi

