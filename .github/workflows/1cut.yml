name: 1cut

on:
  workflow_dispatch:

jobs:
  process-pdf:
    runs-on: ubuntu-latest

    # 设置环境变量
    env:
      WORK_DIR_FILE: "${{ secrets.PRIVATE_DIR }}/myPDF工作目录.v"  # 工作目录配置文件路径
      OUTPUT_DIR: "1cut"  # 输出目录

    steps:
      - name: Checkout public repo
        uses: actions/checkout@v4

      - name: Checkout private repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.PRIVATE_REPO }}
          token: ${{ secrets.PAT }}
          path: private-repo
          ref: main

      - name: Read WORK_DIR from file
        id: read_work_dir
        run: |
          # 读取文件内容，忽略空白行和以 # 开头的行
          WORK_DIR=$(grep -v -e '^#' -e '^$' "private-repo/$WORK_DIR_FILE" | head -n 1)
          if [ -z "$WORK_DIR" ]; then
            echo "Error: No valid WORK_DIR found in $WORK_DIR_FILE"
            exit 1
          fi
          echo "WORK_DIR: $WORK_DIR"
          echo "WORK_DIR=$WORK_DIR" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y poppler-utils python3-pip
          pip3 install PyMuPDF

      - name: Clean output directory
        run: |
          OUTPUT_PATH="private-repo/${{ secrets.PRIVATE_DIR }}/$WORK_DIR/$OUTPUT_DIR"
          if [ -d "$OUTPUT_PATH" ]; then
            rm -rf "$OUTPUT_PATH"/*
          else
            mkdir -p "$OUTPUT_PATH"
          fi

      - name: List PDF files in private repo (root directory only)
        run: |
          find private-repo/${{ secrets.PRIVATE_DIR }}/$WORK_DIR -maxdepth 1 -name "*.pdf" | sort > pdf_files.txt
          #echo "Found PDF files:"
          #cat pdf_files.txt

          # 输出模糊化后的内容
          echo "Found PDF files (masked):"
          cat pdf_files.txt | awk '{print substr($0, 1, 3) "***" substr($0, length($0)-4)}'

      - name: Extract text and split PDF into parts
        run: |
          # 初始化输出目录
          OUTPUT_PATH="private-repo/${{ secrets.PRIVATE_DIR }}/$WORK_DIR/$OUTPUT_DIR"
          mkdir -p "$OUTPUT_PATH"
      
          # 将 Python 逻辑写入临时脚本
          cat << 'EOF' > process_pdf.py
          import fitz  # PyMuPDF
          import os
          import sys

          pdf_path = sys.argv[1]
          output_dir = sys.argv[2]
          base_name = os.path.splitext(os.path.basename(pdf_path))[0]

          # 打开 PDF 文件
          doc = fitz.open(pdf_path)

          for page_num, page in enumerate(doc, 1):
              # 获取页面尺寸
              rect = page.rect
              w, h = rect.width, rect.height

              # 按上、中、下三部分提取文本
              for part_num, (part_name, (y0, y1)) in enumerate([
                  ("1top", (0, h/3)),
                  ("2mid", (h/3, 2*h/3)),
                  ("3bot", (2*h/3, h))
              ], 1):
                  # 定义文本提取区域
                  text_rect = fitz.Rect(0, y0, w, y1)
                  text = page.get_textbox(text_rect)
                  txt_path = f"{output_dir}/{base_name}_p{page_num}_{part_name}.txt"
                  with open(txt_path, "w", encoding="utf-8") as f:
                      f.write(text)

                  # 创建新的 PDF 页面
                  new_doc = fitz.open()
                  new_page = new_doc.new_page(width=w, height=(y1 - y0))

                  # 将当前页面的指定区域复制到新页面
                  new_page.show_pdf_page(
                      fitz.Rect(0, 0, w, (y1 - y0)),  # 目标区域
                      doc,  # 源文档
                      page_num - 1,  # 源页面索引（从 0 开始）
                      clip=fitz.Rect(0, y0, w, y1)  # 源页面裁剪区域
                  )

                  # 保存分割后的 PDF
                  pdf_path = f"{output_dir}/{base_name}_p{page_num}_{part_name}.pdf"
                  new_doc.save(pdf_path)
                  new_doc.close()
          EOF
      
          # 读取 PDF 文件路径到数组中
          mapfile -t pdf_files < pdf_files.txt

          # 检查是否读取到文件
          if [ ${#pdf_files[@]} -eq 0 ]; then
            echo "No PDF files found!"
            exit 1
          fi

          # 循环处理每个 PDF 文件
          for pdf_path in "${pdf_files[@]}"; do
            echo "Processing: $pdf_path"
            python3 process_pdf.py "$pdf_path" "$OUTPUT_PATH"
          done

      - name: Commit and push to private repo
        run: |
          cd private-repo

          # 添加所有更改到暂存区
          git add .

          # 检查是否有 staged 的更改
          if git diff --cached --quiet; then
            echo "No staged changes to commit. Skipping commit and push."
            exit 0
          fi

          # 如果有 staged 的更改，则提交并推送
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          git commit -m "Auto: Extracted text and split PDF into parts"
          git push "https://x-access-token:${{ secrets.PAT }}@github.com/${{ secrets.PRIVATE_REPO }}.git" main
