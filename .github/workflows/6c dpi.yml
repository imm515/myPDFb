name: 6c dpi Merge to A4 PDF

on:
  workflow_dispatch:
    inputs:
      dpi_setting:
        description: '输出DPI设置 (建议72-300)'
        required: false
        default: '150'

jobs:
  pdf-merger:
    runs-on: ubuntu-latest
    env:
      SOURCE_DIR: ${{ secrets.PRIVATE_DIR }}/3查找
      OUTPUT_DIR: ${{ secrets.PRIVATE_DIR }}/4拼接PDF

    steps:
      - name: Checkout private repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.PRIVATE_REPO }}
          token: ${{ secrets.PAT }}
          path: private-repo
          ref: main

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libjpeg-dev zlib1g-dev
          pip install Pillow reportlab

      - name: Merge images to A4 PDF (最终修正版)
        run: |
          cd private-repo
          python3 <<EOF
          import os
          from PIL import Image
          from reportlab.pdfgen import canvas
          from reportlab.lib.pagesizes import A4
          from reportlab.lib.utils import ImageReader
          import re

          # 获取输入参数
          TARGET_DPI = int("${{ github.event.inputs.dpi_setting }}")
          PRINT_DPI = 72
          A4_WIDTH_POINTS, A4_HEIGHT_POINTS = A4

          # 关键修复1：确保输出目录存在
          output_dir = os.getenv("OUTPUT_DIR")
          os.makedirs(output_dir, exist_ok=True)  # ← 新增目录创建

          # 计算实际显示尺寸
          def calc_display_size(img_width_px, img_height_px):
              width_inch = img_width_px / TARGET_DPI
              height_inch = img_height_px / TARGET_DPI
              return width_inch * PRINT_DPI, height_inch * PRINT_DPI

          # 获取排序后的文件列表
          def natural_sort_key(s):
              return [int(text) if text.isdigit() else text.lower()
                      for text in re.split(r'(\d+)', os.path.basename(s))]

          all_files = []
          for root, _, files in os.walk(os.getenv("SOURCE_DIR")):
              for f in files:
                  if f.lower().endswith('.png'):
                      all_files.append(os.path.join(root, f))
          all_files.sort(key=natural_sort_key)

          # 创建PDF
          output_path = os.path.join(output_dir, "merged.pdf")  # ← 使用绝对路径
          c = canvas.Canvas(output_path, pagesize=A4)

          # 分页处理
          current_page = []
          for img_path in all_files:
              if len(current_page) >= 3:
                  for idx, (img, size) in enumerate(current_page):
                      y_pos = A4_HEIGHT_POINTS - (idx+1)*(A4_HEIGHT_POINTS/3)
                      c.drawImage(img, 50, y_pos + 20, width=size[0], height=size[1])
                  c.showPage()
                  current_page = []
              
              try:
                  img = Image.open(img_path)
                  display_size = calc_display_size(*img.size)
                  section_height = (A4_HEIGHT_POINTS/3) - 40
                  scale = min(1.0, section_height / display_size[1])
                  current_page.append((
                      ImageReader(img),
                      (display_size[0] * scale, display_size[1] * scale)
                  ))
              except Exception as e:
                  print(f"处理失败：{img_path} - {str(e)}")

          # 关键修复2：处理最后未完成的页面
          if current_page:
              for idx, (img, size) in enumerate(current_page):
                  y_pos = A4_HEIGHT_POINTS - (idx+1)*(A4_HEIGHT_POINTS/3)
                  c.drawImage(img, 50, y_pos + 20, width=size[0], height=size[1])
              # 补充空白区域
              for idx in range(len(current_page), 3):
                  y_pos = A4_HEIGHT_POINTS - (idx+1)*(A4_HEIGHT_POINTS/3)
                  c.setStrokeColorRGB(0.8,0.8,0.8)
                  c.rect(50, y_pos + 20, A4_WIDTH_POINTS-100, section_height)
              c.showPage()

          # 关键修复3：保存前再次确认目录存在
          os.makedirs(os.path.dirname(output_path), exist_ok=True)
          c.save()
          print(f"PDF已保存至：{output_path}")
          EOF

      - name: Commit results
        run: |
          cd private-repo
          git config user.email "pdf-merger@auto"
          git config user.name "PDF Merger"

          # 生成版本号
          timestamp=$(date +%Y%m%d%H%M%S)
          commit_msg="Auto: 生成拼接PDF（v$timestamp）"

          git add "$OUTPUT_DIR"
          git commit -m "$commit_msg"
          git push "https://x-access-token:${{ secrets.PAT }}@github.com/${{ secrets.PRIVATE_REPO }}.git" main
