name: 5 E Find PNG txt 加序号

on:
  workflow_dispatch:
    inputs:
      clean_target:
        description: '是否清空旧3查找目录？'
        required: false
        default: 'true'

jobs:
  file-matcher:
    runs-on: ubuntu-latest
    env:
      SOURCE_DIR: ${{ secrets.PRIVATE_DIR }}/2name
      TARGET_DIR: ${{ secrets.PRIVATE_DIR }}/3查找
      SEARCH_FILE: ${{ secrets.PRIVATE_DIR }}/#查找单号

    steps:
      - name: Checkout private repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.PRIVATE_REPO }}
          token: ${{ secrets.PAT }}
          path: private-repo
          ref: main

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pillow

      - name: Install Arial font
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-liberation

      - name: Initialize directories
        run: |
          cd private-repo
          # 处理目标目录
          if [ "${{ github.event.inputs.clean_target }}" = "true" ]; then
            rm -rf "$TARGET_DIR"
            echo "♻️ 已清空旧3查找目录"
          fi
          mkdir -p "$TARGET_DIR"
          
          # 检查查找单号文件是否存在
          if [ ! -f "$SEARCH_FILE" ]; then
            echo "::error::查找单号文件不存在：$SEARCH_FILE"
            exit 1
          fi

      - name: Process number matching
        run: |
          cd private-repo
          python3 <<EOF
          import os
          import re
          import shutil
          from pathlib import Path
          from PIL import Image, ImageDraw, ImageFont

          source_dir = Path(os.getenv("SOURCE_DIR"))
          target_dir = Path(os.getenv("TARGET_DIR"))
          search_file = Path(os.getenv("SEARCH_FILE"))

          # 解析查找单号文件
          search_numbers = []
          with open(search_file, 'r') as f:
              for line in f:
                  line = line.strip()
                  # 跳过注释和空行
                  if line.startswith('#') or not line:
                      continue
                  # 提取数字部分（支持两种格式）
                  if '--' in line:
                      num = line.split('--')[-1].strip()
                  else:
                      num = line.split()[0].strip()
                  if num.isdigit():
                      search_numbers.append(f"{int(num):04d}")

          print(f"需要查找的编号：{search_numbers}")

          # 创建目标目录结构
          target_dir.mkdir(parents=True, exist_ok=True)

          # 设置字体为等宽字体
          try:
              font = ImageFont.truetype("LiberationMono-Regular.ttf", 8)  # 使用 Liberation Mono 等宽字体
          except IOError:
              font = ImageFont.load_default()  # 如果 Liberation Mono 未找到，使用默认字体
              print("::warning::Liberation Mono 字体未找到，使用默认字体")
              

          # 匹配文件并复制
          copied_files = []
          for file_path in source_dir.glob('**/*.png'):  # 修改为查找 .png 文件
              # 匹配四位数开头的文件名
              match = re.match(r'^(\d{4})_', file_path.name)
              if not match:
                  continue
              
              file_num = match.group(1)
              if file_num in search_numbers:
                  # 打开图片
                  with Image.open(file_path) as img:
                      # 获取图片尺寸
                      width, height = img.size
                      # 创建绘图对象
                      draw = ImageDraw.Draw(img)
                      # 要添加的文本（去掉前导零）
                      text = str(int(file_num))
                      # 计算文本位置（右下角，留出 10px 边距）
                      text_bbox = draw.textbbox((0, 0), text, font=font)
                      text_width = text_bbox[2] - text_bbox[0]
                      text_height = text_bbox[3] - text_bbox[1]
                      text_position = (width - text_width - 10, height - text_height - 10)
                      # 添加文本
                      #draw.text(text_position, text, font=font, fill="black")
                      draw.text(text_position, text, font=font, fill="gray")
                                            
                      # 处理目标文件名
                      target_png_path = target_dir / file_path.name
                      # 处理重名文件
                      counter = 1
                      while target_png_path.exists():
                          new_name = f"{file_num}_{counter:02d}{file_path.suffix}"
                          target_png_path = target_dir / new_name
                          counter += 1
                      
                      # 保存修改后的图片
                      img.save(target_png_path)
                      copied_files.append(target_png_path.name)

                  # 复制对应的 .txt 文件
                  txt_path = file_path.with_suffix('.txt')
                  if txt_path.exists():
                      target_txt_path = target_dir / txt_path.name
                      # 处理重名文件
                      counter = 1
                      while target_txt_path.exists():
                          new_name = f"{file_num}_{counter:02d}{txt_path.suffix}"
                          target_txt_path = target_dir / new_name
                          counter += 1
                      
                      shutil.copy2(txt_path, target_txt_path)
                      copied_files.append(target_txt_path.name)

          print(f"\n成功复制 {len(copied_files)} 个文件：")
          print('\n'.join(copied_files))

          if not copied_files:
              print("::warning::没有找到匹配的文件！")
              exit(78)
          EOF

      - name: Commit and push results
        run: |
          cd private-repo
          git config user.email "file-matcher@auto"
          git config user.name "File Matcher"
          
          # 生成智能提交信息
          file_count=$(find "$TARGET_DIR" -type f | wc -l)
          commit_msg="Auto: 找到并复制 $file_count 个匹配文件（包含 PNG 和 TXT）"
          
          git add "$TARGET_DIR"
          git commit -m "$commit_msg"
          git push "https://x-access-token:${{ secrets.PAT }}@github.com/${{ secrets.PRIVATE_REPO }}.git" main
