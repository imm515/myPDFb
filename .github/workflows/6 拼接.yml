name: 6 原版 Merge to A4 PDF

on:
  workflow_dispatch:
    inputs:
      dpi_setting:
        description: '输出DPI设置 (建议72-300)'
        required: false
        default: '150'

jobs:
  pdf-merger:
    runs-on: ubuntu-latest
    env:
      SOURCE_DIR: ${{ secrets.PRIVATE_DIR }}/3查找
      OUTPUT_DIR: ${{ secrets.PRIVATE_DIR }}/4拼接PDF

    steps:
      - name: Checkout private repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.PRIVATE_REPO }}
          token: ${{ secrets.PAT }}
          path: private-repo
          ref: main

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libjpeg-dev zlib1g-dev
          pip install Pillow reportlab

      - name: Prepare workspace
        run: |
          cd private-repo
          mkdir -p "$OUTPUT_DIR"
          echo "DPI: ${{ github.event.inputs.dpi_setting }}" > merge.log

      - name: Merge images to A4 PDF
        run: |
          cd private-repo
          python3 <<EOF
          import os
          import math
          from PIL import Image
          from reportlab.pdfgen import canvas
          from reportlab.lib.pagesizes import A4
          from reportlab.lib.utils import ImageReader
          import re

          # 配置参数
          DPI = int("${{ github.event.inputs.dpi_setting }}")
          A4_WIDTH, A4_HEIGHT = A4  # 210x297 mm
          MM_TO_POINT = 2.83465  # 1mm = 2.83465 points
          PAGE_WIDTH = A4_WIDTH * MM_TO_POINT  # 595.276 points
          PAGE_HEIGHT = A4_HEIGHT * MM_TO_POINT  # 841.89 points

          # 计算每个区域的高度（三等分）
          SECTION_HEIGHT = PAGE_HEIGHT / 3
          MARGIN = 10  # 边距（points）

          # 获取文件列表并自然排序
          def natural_sort_key(s):
              return [int(text) if text.isdigit() else text.lower()
                      for text in re.split(r'(\d+)', s)]

          all_files = []
          for root, _, files in os.walk(os.getenv("SOURCE_DIR")):
              for f in files:
                  if f.lower().endswith('.png'):
                      all_files.append(os.path.join(root, f))
          all_files.sort(key=natural_sort_key)

          # 创建输出PDF
          output_path = os.path.join(os.getenv("OUTPUT_DIR"), "merged.pdf")
          c = canvas.Canvas(output_path, pagesize=(PAGE_WIDTH, PAGE_HEIGHT))

          # 分页处理（每页3张）
          for page_num, i in enumerate(range(0, len(all_files), 3)):
              # 获取当前页的3个图片
              page_files = all_files[i:i+3]
              
              # 创建新页面
              c.showPage()
              
              # 按顺序排列图片
              for section, img_path in enumerate(page_files):
                  try:
                      img = Image.open(img_path)
                      img_reader = ImageReader(img)
                      
                      # 计算缩放比例
                      img_width, img_height = img.size
                      target_width = PAGE_WIDTH - 2*MARGIN
                      target_height = SECTION_HEIGHT - 2*MARGIN
                      
                      # 保持比例缩放
                      scale = min(target_width/img_width, target_height/img_height)
                      new_width = img_width * scale
                      new_height = img_height * scale
                      
                      # 计算位置（居中显示）
                      x = (PAGE_WIDTH - new_width)/2
                      y = PAGE_HEIGHT - (section+1)*SECTION_HEIGHT + (SECTION_HEIGHT - new_height)/2
                      
                      c.drawImage(img_reader, x, y, new_width, new_height)
                  except Exception as e:
                      print(f"处理失败：{img_path} - {str(e)}")
                      
              # 补充空白区域
              for section in range(len(page_files), 3):
                  # 绘制空白区域边框
                  c.setStrokeColorRGB(0.8, 0.8, 0.8)
                  c.setLineWidth(0.5)
                  y_pos = PAGE_HEIGHT - (section+1)*SECTION_HEIGHT
                  c.rect(MARGIN, y_pos + MARGIN, 
                        PAGE_WIDTH - 2*MARGIN, SECTION_HEIGHT - 2*MARGIN)

          # 保存PDF
          c.save()
          
          print(f"生成PDF完成：{output_path}")
          EOF

      - name: Commit results
        run: |
          cd private-repo
          git config user.email "pdf-merger@auto"
          git config user.name "PDF Merger"

          # 生成版本号
          timestamp=$(date +%Y%m%d%H%M%S)
          commit_msg="Auto: 生成拼接PDF（v$timestamp）"

          git add "$OUTPUT_DIR"
          git commit -m "$commit_msg"
          git push "https://x-access-token:${{ secrets.PAT }}@github.com/${{ secrets.PRIVATE_REPO }}.git" main
