name: 2name

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["1cut"]
    types:
      - completed

concurrency:
  group: ${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  process-naming:
    runs-on: ubuntu-latest
    env:
      WORK_DIR_FILE: "${{ secrets.PRIVATE_DIR }}/myPDF工作目录.v"

    steps:
      - name: Checkout private repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.PRIVATE_REPO }}
          token: ${{ secrets.PAT }}
          path: private-repo
          ref: main

      - name: Read WORK_DIR from file
        id: read_work_dir
        run: |
          WORK_DIR=$(grep -v -e '^#' -e '^$' "private-repo/$WORK_DIR_FILE" | head -n 1)
          if [ -z "$WORK_DIR" ]; then
            echo "Error: No valid WORK_DIR found in $WORK_DIR_FILE"
            exit 1
          fi
          echo "WORK_DIR=${{ secrets.PRIVATE_DIR }}/$WORK_DIR" >> $GITHUB_ENV
          echo "SOURCE_DIR=${{ secrets.PRIVATE_DIR }}/$WORK_DIR/1cut" >> $GITHUB_ENV
          echo "DEST_DIR=${{ secrets.PRIVATE_DIR }}/$WORK_DIR/2name" >> $GITHUB_ENV

      - name: Initialize workspace
        run: |
          cd private-repo
          rm -rf "${{ env.DEST_DIR }}"
          echo "♻️ 已清空旧2name目录"
          mkdir -p "${{ env.DEST_DIR }}"

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install pymupdf numpy Pillow --quiet
          
      - name: Process files based on PDF content
        run: |
          cd private-repo
          cat << 'EOF' > process_files.py
          import os
          import re
          import fitz  # PyMuPDF
          import numpy as np
          from PIL import Image
          import io

          SOURCE = os.getenv("SOURCE_DIR")
          DEST = os.getenv("DEST_DIR")

          existing_files = [f for f in os.listdir(DEST) if f.endswith('.pdf')]
          counter = max([int(f.split('_')[0]) for f in existing_files]) if existing_files else 0

          all_files = []
          for root, _, files in os.walk(SOURCE):
              for f in files:
                  if f.endswith('.pdf') and any(part in f for part in ['1top', '2mid', '3bot']):
                      all_files.append(os.path.join(root, f))

          def natural_sort_key(s):
              return [int(text) if text.isdigit() else text.lower()
                      for text in re.split(r'(\d+)', s)]

          all_files.sort(key=natural_sort_key)

          def is_pdf_empty(pdf_path):
              # 打开PDF文件
              doc = fitz.open(pdf_path)
              
              text = ""
              for page in doc:
                  text += page.get_text("text")  # 提取文本
              
              if text.strip():  # 如果有提取到文本，返回False
                  return False
              
              # 如果没有提取到文本，检查图像内容
              for page in doc:
                  # 获取页面的图像
                  pix = page.get_pixmap()  # 获取该页面的图片内容
                  img_data = pix.tobytes("png")  # 转为PNG字节流
                  
                  # 使用PIL加载图像并转为灰度图像
                  img = Image.open(io.BytesIO(img_data)).convert('L')  # 转为灰度图
                  img_array = np.array(img)  # 转为NumPy数组

                  # 计算图像的非白色像素占比
                  threshold = 240  # 以255（纯白）为基准的阈值
                  non_white_pixels = np.sum(img_array < threshold)
                  total_pixels = img_array.size

                  non_white_percentage = non_white_pixels / total_pixels * 100

                  # 判断是否存在足够的非白色像素
                  # 如果非白色像素占比低于某个阈值（例如1%），则认为是空白的
                  if non_white_percentage < 1:
                      return True

              return False

          for filepath in all_files:
              filename = os.path.basename(filepath)
              match = re.search(r'p(\d+)_(1top|2mid|3bot)', filename)
              if not match:
                  continue

              page_num = match.group(1)
              part_type = match.group(2)
              txt_path = filepath.replace('.pdf', '.txt')

              if os.path.exists(txt_path):
                  with open(txt_path, 'r', encoding='utf-8') as f:
                      content = f.read().strip()

                  if content:
                      counter += 1
                      new_name = f"{counter:04d}_{page_num}{part_type}"
                      os.system(f"cp '{filepath}' '{os.path.join(DEST, new_name)}.pdf'")
                      os.system(f"cp '{txt_path}' '{os.path.join(DEST, new_name)}.txt'")
                      print(f"Processed: {filename} → {new_name}.pdf & .txt")
                  else:
                      os.remove(filepath)
                      os.remove(txt_path)
                      print(f"Deleted empty: {filename} and {os.path.basename(txt_path)}")
              else:
                  if is_pdf_empty(filepath):
                      print(f"Warning: {filename} appears to be a scanned document or empty PDF.")
                      # Optionally delete or handle scanned PDFs differently
                      os.remove(filepath)
                      print(f"Deleted scanned/empty: {filename}")
                  else:
                      print(f"TXT file not found for: {filename}")
          EOF
          python3 process_files.py

      - name: Commit and push results
        run: |
          cd private-repo
          git config user.email "doc-processor@auto"
          git config user.name "Document Processor"

          file_count=$(find "${{ env.DEST_DIR }}" -type f -name "*.pdf" | wc -l)
          commit_msg="Auto: Generated $file_count named slices and paired TXT files"

          git add "${{ env.DEST_DIR }}"
          if git diff --cached --quiet; then
            echo "No staged changes to commit. Skipping commit and push."
            exit 0
          fi
          git commit -m "$commit_msg"
          git push "https://x-access-token:${{ secrets.PAT }}@github.com/${{ secrets.PRIVATE_REPO }}.git" main
