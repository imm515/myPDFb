name: 4 Generate Named Images

on:
  workflow_dispatch:
    inputs:
      clean_run:
        description: '是否清空旧2name目录？'
        required: false
        default: 'true'

jobs:
  process-naming:
    runs-on: ubuntu-latest
    env:
      SOURCE_DIR: ${{ secrets.PRIVATE_DIR }}/1cut
      DEST_DIR: ${{ secrets.PRIVATE_DIR }}/2name

    steps:
      - name: Checkout private repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.PRIVATE_REPO }}
          token: ${{ secrets.PAT }}
          path: private-repo
          ref: main

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install image processing dependencies
        run: |
          sudo apt-get install -y libgl1 libglib2.0-0
          pip install numpy pillow scikit-image
      - name: Initialize workspace
        run: |
          cd private-repo
          # 根据参数决定是否清空旧目录
          if [ "${{ github.event.inputs.clean_run }}" = "true" ]; then
            rm -rf "$DEST_DIR"
            echo "♻️ 已清空旧2name目录"
          fi
          mkdir -p "$DEST_DIR"
      - name: Process images with smart filtering
        run: |
          cd private-repo
          python3 <<EOF
          import os
          import re
          import sys
          from PIL import Image
          import numpy as np
          from skimage import filters
          SOURCE = os.getenv("SOURCE_DIR")
          DEST = os.getenv("DEST_DIR")
          
          def dynamic_threshold(img, part_type):
              """智能动态阈值算法"""
              gray = img.convert('L')
              arr = np.array(gray)
              
              # 使用Otsu算法计算最佳阈值
              thresh = filters.threshold_otsu(arr)
              
              # 根据区域类型调整阈值
              if part_type == '1top':
                  thresh = max(thresh, 245)  # 确保顶部严格
              else:
                  thresh = max(thresh - 10, 230)  # 底部宽松
              return thresh
          def is_meaningful(image_path, part_type):
              """改进的空白检测算法"""
              try:
                  img = Image.open(image_path)
                  w, h = img.size
                  
                  # 区域特异性裁剪（例如排除顶部页码区域）
                  if part_type == '1top':
                      crop_area = (0, h//10, w, h//3)  # 排除顶部10%可能存在的页码
                  else:
                      crop_area = (0, 0, w, h)
                  
                  img = img.crop(crop_area)
                  thresh = dynamic_threshold(img, part_type)
                  
                  # 二值化处理
                  binary = np.array(img.convert('L')) > thresh
                  
                  # 有效内容占比计算
                  white_ratio = np.mean(binary)
                  
                  # 不同区域的不同判断标准
                  if part_type == '1top':
                      return white_ratio < 0.95  # 允许5%空白
                  else:
                      return white_ratio < 0.90  # 允许10%空白
                  
              except Exception as e:
                  print(f"Error processing {image_path}: {str(e)}", file=sys.stderr)
                  return False
          # 获取已存在的最大序号
          existing_files = [f for f in os.listdir(DEST) if f.endswith('.png')]
          counter = max([int(f.split('_')[0]) for f in existing_files]) if existing_files else 0
          # 按自然顺序处理文件
          all_files = []
          for root, _, files in os.walk(SOURCE):
              for f in files:
                  if any(f.endswith(f'_{part}.png') for part in ['1top', '2mid', '3bot']):
                      all_files.append(os.path.join(root, f))
          
          # 自然排序算法
          def natural_sort_key(s):
              return [int(text) if text.isdigit() else text.lower()
                      for text in re.split(r'(\d+)', s)]
                      
          all_files.sort(key=natural_sort_key)
          # 主处理循环
          for filepath in all_files:
              filename = os.path.basename(filepath)
              match = re.search(r'p(\d+)_(1top|2mid|3bot)', filename)  # \d匹配1/2/3前缀
              if not match:
                  continue
                  
              page_num = match.group(1)
              part_type = match.group(2)
              
              # 跳过不需要检测的top部分
              if part_type == '1top':
                  is_valid = True
              else:
                  is_valid = is_meaningful(filepath, part_type)
              
              if is_valid:
                  counter += 1
                  new_name = f"{counter:04d}_{page_num}{part_type}.png"
                  os.system(f"cp '{filepath}' '{os.path.join(DEST, new_name)}'")
                  print(f"Processed: {filename} → {new_name}")
              else:
                  print(f"Skipped blank: {filename}")
          EOF
      - name: Commit and push results
        run: |
          cd private-repo
          git config user.email "doc-processor@auto"
          git config user.name "Document Processor"
          
          # 生成智能提交信息
          file_count=$(find "$DEST_DIR" -type f | wc -l)
          commit_msg="Auto: Generated $file_count named slices"
          
          git add "$DEST_DIR"
          git commit -m "$commit_msg"
          git push "https://x-access-token:${{ secrets.PAT }}@github.com/${{ secrets.PRIVATE_REPO }}.git" main
