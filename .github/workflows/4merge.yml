
name: 4merge

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["3find"]
    types:
      - completed

concurrency:
  group: ${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  pdf-merger:
    runs-on: ubuntu-latest
    env:
      WORK_DIR_FILE: "${{ secrets.PRIVATE_DIR }}/myPDF工作目录.v"  # 工作目录配置文件路径

    steps:
      - name: Checkout private repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.PRIVATE_REPO }}
          token: ${{ secrets.PAT }}
          path: private-repo
          ref: main

      - name: Read WORK_DIR from file
        id: read_work_dir
        run: |
          # 读取文件内容，忽略空白行和以 # 开头的行
          WORK_DIR=$(grep -v -e '^#' -e '^$' "private-repo/$WORK_DIR_FILE" | head -n 1)
          if [ -z "$WORK_DIR" ]; then
            echo "Error: No valid WORK_DIR found in $WORK_DIR_FILE"
            exit 1
          fi
          echo "WORK_DIR: WORK_DIR"
          echo "WORK_DIR=${{ secrets.PRIVATE_DIR }}/$WORK_DIR" >> $GITHUB_ENV
      - name: 设置工作目录环境变量
        run: |
          echo "SOURCE_DIR=$WORK_DIR/3查找" >> $GITHUB_ENV
          echo "OUTPUT_DIR=$WORK_DIR/4拼接PDF" >> $GITHUB_ENV
          echo "SEARCH_FILE=$WORK_DIR/#查找单号.v" >> $GITHUB_ENV
      - name: 使用工作目录
        run: |
          echo "工作目录是：WORK_DIR"
          echo "源目录是：SOURCE_DIR"
          echo "目标目录是：OUTPUT_DIR"
          echo "查找单号文件是：SEARCH_FILE"
      - name: Install Ghostscript
        run: |
          sudo apt-get update
          sudo apt-get install -y ghostscript
      - name: Prepare workspace
        run: |
          cd private-repo
          mkdir -p "$OUTPUT_DIR"
          echo "开始拼接PDF" > merge.log
      - name: Extract search numbers
        id: extract-search-numbers
        run: |
          cd private-repo
          # 解析查找单号文件，获取排序依据
          search_numbers=()
          while IFS= read -r line; do
            line=$(echo "$line" | xargs)  # 去除前后空格
            if [[ -z "$line" || "$line" == \#* ]]; then  # 跳过空行和注释
              continue
            fi
            # 提取数字部分（支持两种格式）
            if [[ "$line" == *--* ]]; then
              num=$(echo "$line" | awk -F'--' '{print $NF}' | xargs)
            else
              num=$(echo "$line" | awk '{print $1}' | xargs)
            fi
            if [[ "$num" =~ ^[0-9]+$ ]]; then
              search_numbers+=("$(printf "%04d" "$num")")  # 补零到4位
            fi
          done < "$SEARCH_FILE"
          echo "查找单号顺序：${search_numbers[*]}"
          echo "SEARCH_NUMBERS=${search_numbers[*]}" >> $GITHUB_ENV
      - name: Merge and compress PDFs with Ghostscript
        run: |
          cd private-repo
          # 按查找单号顺序获取PDF文件
          pdf_files=()
          for num in $SEARCH_NUMBERS; do
            matched_file=$(find "$SOURCE_DIR" -type f -name "${num}_*.pdf" | sort -V)
            if [[ -n "$matched_file" ]]; then
              pdf_files+=("$matched_file")
            else
              echo "::warning::未找到编号为 $num 的PDF文件"
            fi
          done
          # 使用Ghostscript合并并压缩PDF
          gs -sDEVICE=pdfwrite \
             -dCompatibilityLevel=1.4 \
             -dPDFSETTINGS=/printer \
             -dNOPAUSE \
             -dQUIET \
             -dBATCH \
             -sOutputFile="${OUTPUT_DIR}/merged_compressed.pdf" \
             "${pdf_files[@]}"
          echo "成功生成合并并压缩后的PDF：OUTPUT_DIR/m***ed.pdf"
      - name: Merge TXT files with strict check
        run: |
          cd private-repo
          python3 <<EOF
          import os
          from pathlib import Path  # 导入 Path 类
          
          source_dir = os.getenv("SOURCE_DIR")
          output_dir = os.getenv("OUTPUT_DIR")
          search_numbers = os.getenv("SEARCH_NUMBERS").split()
          output_txt_path = os.path.join(output_dir, "merged.txt")
          
          # 按查找单号顺序获取TXT文件
          txt_files = []
          for num in search_numbers:
              matched_files = list(Path(source_dir).glob(f"**/{num}_*.txt"))  # 使用 Path 类
              if matched_files:
                  txt_files.extend(str(f) for f in matched_files)
              else:
                  print(f"::warning::未找到编号为 {num} 的TXT文件")
          
          # 检查TXT文件是否与PDF文件一一对应
          missing_pdf_files = []
          for txt_file in txt_files:
              pdf_file = txt_file.replace('.txt', '.pdf')
              if not os.path.exists(pdf_file):
                  missing_pdf_files.append(os.path.basename(txt_file))
          
          if missing_pdf_files:
              print("::error::以下TXT文件缺少对应的PDF文件：")
              for file in missing_pdf_files:
                  print(f"- {file}")
              exit(1)
          
          # 合并TXT文件内容
          with open(output_txt_path, 'w', encoding='utf-8') as outfile:
              for txt_file in txt_files:
                  with open(txt_file, 'r', encoding='utf-8') as infile:
                      outfile.write(infile.read())
                      outfile.write("\n\n")  # 每个TXT文件后插入两个空行
          
          print(f"成功合并 {len(txt_files)} 个TXT文件到：output_txt_path")
          EOF
      - name: Commit results
        run: |
          cd private-repo
          git config user.email "pdf-merger@auto"
          git config user.name "PDF Merger"
          # 生成版本号
          timestamp=$(date +%Y%m%d%H%M%S)
          commit_msg="Auto: 生成优化拼接PDF和汇总TXT（v$timestamp）"
          # 添加更改到暂存区
          git add "$OUTPUT_DIR"
          # 检查是否有 staged 的更改
          if git diff --cached --quiet; then
            echo "No staged changes to commit. Skipping commit and push."
            exit 0
          fi
          # 如果有 staged 的更改，则提交并推送
          git commit -m "$commit_msg" > /dev/null 2>&1
          git push "https://x-access-token:${{ secrets.PAT }}@github.com/${{ secrets.PRIVATE_REPO }}.git" main
