name: 4merge

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["3find"]
    types:
      - completed

concurrency:
  group: ${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  pdf-merger:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ secrets.PRIVATE_DIR }}/cb202501
    steps:
      - name: Checkout private repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.PRIVATE_REPO }}
          token: ${{ secrets.PAT }}
          path: private-repo
          ref: main

      - name: Install Ghostscript
        run: |
          sudo apt-get update
          sudo apt-get install -y ghostscript

      - name: Prepare workspace
        run: |
          mkdir -p "$OUTPUT_DIR"
          echo "开始拼接PDF" > merge.log

      - name: Extract search numbers
        id: extract-search-numbers
        run: |
          search_numbers=()
          while IFS= read -r line; do
            line=$(echo "$line" | xargs)
            if [[ -z "$line" || "$line" == \#* ]]; then
              continue
            fi
            if [[ "$line" == *--* ]]; then
              num=$(echo "$line" | awk -F'--' '{print $NF}' | xargs)
            else
              num=$(echo "$line" | awk '{print $1}' | xargs)
            fi
            if [[ "$num" =~ ^[0-9]+$ ]]; then
              search_numbers+=("$(printf "%04d" "$num")")
            fi
          done < "$SEARCH_FILE"

          echo "查找单号顺序：${search_numbers[*]}"
          echo "SEARCH_NUMBERS=${search_numbers[*]}" >> $GITHUB_ENV

      - name: Merge and compress PDFs with Ghostscript
        run: |
          pdf_files=()
          for num in $SEARCH_NUMBERS; do
            matched_file=$(find "$SOURCE_DIR" -type f -name "${num}_*.pdf" | sort -V)
            if [[ -n "$matched_file" ]]; then
              pdf_files+=("$matched_file")
            else
              echo "::warning::未找到编号为 $num 的PDF文件"
            fi
          done

          gs -sDEVICE=pdfwrite \
             -dCompatibilityLevel=1.4 \
             -dPDFSETTINGS=/printer \
             -dNOPAUSE \
             -dQUIET \
             -dBATCH \
             -sOutputFile="${OUTPUT_DIR}/merged_compressed.pdf" \
             "${pdf_files[@]}"

          echo "成功生成合并并压缩后的PDF：${OUTPUT_DIR}/merged_compressed.pdf"

      - name: Merge TXT files with strict check
        run: |
          output_txt_path="${OUTPUT_DIR}/merged.txt"
          txt_files=()
          for num in $SEARCH_NUMBERS; do
              matched_files=$(find "$SOURCE_DIR" -type f -name "${num}_*.txt" | sort -V)
              if [[ -n "$matched_files" ]]; then
                  txt_files+=("$matched_files")
              else
                  echo "::warning::未找到编号为 $num 的TXT文件"
              fi
          done

          missing_pdf_files=()
          for txt_file in "${txt_files[@]}"; do
              pdf_file="${txt_file%.txt}.pdf"
              if [[ ! -f "$pdf_file" ]]; then
                  missing_pdf_files+=("$(basename "$txt_file")")
              fi
          done

          if [[ ${#missing_pdf_files[@]} -gt 0 ]]; then
              echo "::error::以下TXT文件缺少对应的PDF文件："
              for file in "${missing_pdf_files[@]}"; do
                  echo "- $file"
              done
              exit 1
          fi

          cat "${txt_files[@]}" > "$output_txt_path"
          echo "成功合并 ${#txt_files[@]} 个TXT文件到：$output_txt_path"

      - name: Commit results
        run: |
          git config user.email "pdf-merger@auto"
          git config user.name "PDF Merger"

          timestamp=$(date +%Y%m%d%H%M%S)
          commit_msg="Auto: 生成优化拼接PDF和汇总TXT（v$timestamp）"

          git add "$OUTPUT_DIR"

          if git diff --cached --quiet; then
            echo "No staged changes to commit. Skipping commit and push."
            exit 0
          fi

          git commit -m "$commit_msg"
          git push "https://x-access-token:${{ secrets.PAT }}@github.com/${{ secrets.PRIVATE_REPO }}.git" main
