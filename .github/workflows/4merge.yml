name: 4merge

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["3find"]
    types:
      - completed

concurrency:
  group: ${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  pdf-merger:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      WORK_DIR_FILE: "${{ secrets.PRIVATE_DIR }}/myPDF工作目录.v"

    steps:
      - name: Checkout private repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.PRIVATE_REPO }}
          token: ${{ secrets.PAT }}
          path: private-repo
          ref: main

      - name: Read WORK_DIR from file
        id: read_work_dir
        run: |
          WORK_DIR=$(grep -v -e '^#' -e '^$' "private-repo/$WORK_DIR_FILE" | head -n 1)
          if [ -z "$WORK_DIR" ]; then
            echo "::error::未能从 $WORK_DIR_FILE 中读取到有效 WORK_DIR"
            exit 1
          fi
          echo "✅ 读取到 WORK_DIR: $WORK_DIR"
          echo "WORK_DIR=${{ secrets.PRIVATE_DIR }}/$WORK_DIR" >> $GITHUB_ENV

      - name: 设置源、目标目录环境变量
        run: |
          echo "SOURCE_DIR=$WORK_DIR/3查找" >> $GITHUB_ENV
          echo "OUTPUT_DIR=$WORK_DIR/4拼接PDF" >> $GITHUB_ENV

      - name: 查找查找单号文件（无后缀或 .v 后缀）
        run: |
          # 先定义两个候选文件路径（相对于 private-repo 根）
          CAND1="$WORK_DIR/#查找单号"
          CAND2="$WORK_DIR/#查找单号.v"

          if [ -f "private-repo/$CAND1" ]; then
            MATCHED_SEARCH="$CAND1"
          elif [ -f "private-repo/$CAND2" ]; then
            MATCHED_SEARCH="$CAND2"
          else
            echo "::error::未找到查找单号文件，请确保存在：'$CAND1' 或 '$CAND2'"
            exit 1
          fi

          echo "SEARCH_FILE=$MATCHED_SEARCH" >> $GITHUB_ENV
          echo "✅ 识别到查找单号文件：$MATCHED_SEARCH"

      - name: 使用工作目录
        run: |
          echo "工作目录：$WORK_DIR"
          echo "源目录：$SOURCE_DIR"
          echo "输出目录：$OUTPUT_DIR"
          echo "查找单号文件：$SEARCH_FILE"

      - name: Install Ghostscript
        run: |
          sudo apt-get update
          sudo apt-get install -y ghostscript

      - name: Prepare workspace
        run: |
          cd private-repo
          mkdir -p "$OUTPUT_DIR"
          echo "开始拼接PDF" > merge.log

      - name: Extract search numbers
        id: extract-search-numbers
        run: |
          cd private-repo
          search_numbers=()
          while IFS= read -r line; do
            line=$(echo "$line" | xargs)
            [[ -z "$line" || "$line" == \#* ]] && continue
            if [[ "$line" == *--* ]]; then
              num=$(awk -F'--' '{print $NF}' <<<"$line" | xargs)
            else
              num=$(awk '{print $1}' <<<"$line" | xargs)
            fi
            [[ "$num" =~ ^[0-9]+$ ]] && search_numbers+=("$(printf "%04d" "$num")")
          done < "$SEARCH_FILE"
          echo "查找单号顺序：${search_numbers[*]}"
          echo "SEARCH_NUMBERS=${search_numbers[*]}" >> $GITHUB_ENV

      - name: Merge and compress PDFs with Ghostscript
        run: |
          cd private-repo
          pdf_files=()
          for num in $SEARCH_NUMBERS; do
            matches=( $(find "$SOURCE_DIR" -type f -name "${num}_*.pdf" | sort -V) )
            if [ ${#matches[@]} -gt 0 ]; then
              pdf_files+=( "${matches[@]}" )
            else
              echo "::warning::未找到编号为 $num 的 PDF 文件"
            fi
          done

          gs -sDEVICE=pdfwrite \
             -dCompatibilityLevel=1.4 \
             -dPDFSETTINGS=/printer \
             -dNOPAUSE \
             -dQUIET \
             -dBATCH \
             -sOutputFile="${OUTPUT_DIR}/merged_compressed.pdf" \
             "${pdf_files[@]}"
          echo "✅ 已生成合并并压缩后的PDF：$OUTPUT_DIR/merged_compressed.pdf"

      - name: Merge TXT files with strict check
        run: |
          cd private-repo
          python3 <<EOF
          import os
          from pathlib import Path

          source_dir = os.getenv("SOURCE_DIR")
          output_dir = os.getenv("OUTPUT_DIR")
          nums = os.getenv("SEARCH_NUMBERS").split()
          out_txt = Path(output_dir) / "merged.txt"

          # 收集TXT文件
          txts = []
          for n in nums:
              found = list(Path(source_dir).glob(f"**/{n}_*.txt"))
              if found:
                  txts.extend(found)
              else:
                  print(f"::warning::未找到编号为 {n} 的 TXT 文件")
          # 严格检查一一对应
          missing = [t.name for t in txts if not Path(str(t).replace('.txt','.pdf')).exists()]
          if missing:
              print("::error::以下 TXT 文件缺少对应 PDF：")
              for m in missing: print(f"- {m}")
              exit(1)
          # 合并
          with open(out_txt, 'w', encoding='utf-8') as w:
              for t in txts:
                  w.write(t.read_text(encoding='utf-8'))
                  w.write("\n\n")
          print(f"✅ 已合并 {len(txts)} 个 TXT 文件到：{out_txt}")
          EOF

      - name: Commit results
        run: |
          cd private-repo
          git config user.email "pdf-merger@auto"
          git config user.name "PDF Merger"
          ts=$(date +%Y%m%d%H%M%S)
          msg="Auto: 生成优化拼接PDF和汇总TXT（v$ts）"
          git add "$OUTPUT_DIR"
          if git diff --cached --quiet; then
            echo "No changes to commit. Skipping."
            exit 0
          fi
          git commit -m "$msg"
          git push "https://x-access-token:${{ secrets.PAT }}@github.com/${{ secrets.PRIVATE_REPO }}.git" main
