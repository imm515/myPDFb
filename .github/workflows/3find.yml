name: 3find

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["2name"]
    types:
      - completed

concurrency:
  group: ${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  file-matcher:
    runs-on: ubuntu-latest
    env:
      WORK_DIR_FILE: "${{ secrets.PRIVATE_DIR }}/myPDF工作目录.v"

    steps:
      - name: Checkout private repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.PRIVATE_REPO }}
          token: ${{ secrets.PAT }}
          path: private-repo
          ref: main

      - name: Read WORK_DIR from file
        id: read_work_dir
        run: |
          WORK_DIR=$(grep -v -e '^#' -e '^$' "private-repo/$WORK_DIR_FILE" | head -n 1)
          if [ -z "$WORK_DIR" ]; then
            echo "::error::No valid WORK_DIR found in $WORK_DIR_FILE"
            exit 1
          fi
          echo "WORK_DIR=${{ secrets.PRIVATE_DIR }}/$WORK_DIR" >> $GITHUB_ENV

      - name: 使用工作目录
        run: |
          echo "SOURCE_DIR=$WORK_DIR/2name" >> $GITHUB_ENV
          echo "TARGET_DIR=$WORK_DIR/3查找" >> $GITHUB_ENV
          
          # 修改点：支持多后缀匹配
          SEARCH_PATTERN="private-repo/$WORK_DIR/#查找单号*"
          FOUND_FILE=$(ls -1 $SEARCH_PATTERN 2>/dev/null | head -n 1)
          
          if [ -z "$FOUND_FILE" ]; then
            echo "::error::查找单号文件不存在，预期路径模式：$SEARCH_PATTERN"
            exit 1
          fi
          echo "SEARCH_FILE=$FOUND_FILE" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pymupdf

      - name: Initialize directories
        run: |
          cd private-repo
          rm -rf "$TARGET_DIR"
          mkdir -p "$TARGET_DIR"

      - name: Process number matching
        run: |
          cd private-repo
          python3 <<EOF
          # 原有Python代码完全保持不变
          import os
          import re
          import shutil
          from pathlib import Path
          import fitz

          source_dir = Path(os.getenv("SOURCE_DIR"))
          target_dir = Path(os.getenv("TARGET_DIR"))
          search_file = Path(os.getenv("SEARCH_FILE"))

          search_numbers = []
          with open(search_file, 'r') as f:
              for line in f:
                  line = line.strip()
                  if line.startswith('#') or not line:
                      continue
                  if '--' in line:
                      num = line.split('--')[-1].strip()
                  else:
                      num = line.split()[0].strip()
                  if num.isdigit():
                      search_numbers.append(f"{int(num):04d}")

          copied_files = []
          for file_path in source_dir.glob('**/*.pdf'):
              match = re.match(r'^(\d{4})_', file_path.name)
              if not match:
                  continue
              
              file_num = match.group(1)
              if file_num in search_numbers:
                  pdf_document = fitz.open(file_path)
                  page = pdf_document.load_page(0)
                  rect = page.rect
                  font = fitz.Font("helv")
                  text = str(int(file_num))
                  text_length = font.text_length(text, fontsize=8)
                  text_position = fitz.Point(rect.width - 10 - text_length, rect.height - 10)
                  page.insert_text(text_position, text, fontname="helv", fontsize=8, color=(0.5, 0.5, 0.5))
                  
                  target_pdf_path = target_dir / file_path.name
                  counter = 1
                  while target_pdf_path.exists():
                      new_name = f"{file_num}_{counter:02d}{file_path.suffix}"
                      target_pdf_path = target_dir / new_name
                      counter += 1
                  
                  pdf_document.save(target_pdf_path)
                  pdf_document.close()
                  copied_files.append(target_pdf_path.name)
                  
                  txt_path = file_path.with_suffix('.txt')
                  if txt_path.exists():
                      target_txt_path = target_dir / txt_path.name
                      counter = 1
                      while target_txt_path.exists():
                          new_name = f"{file_num}_{counter:02d}{txt_path.suffix}"
                          target_txt_path = target_dir / new_name
                          counter += 1
                      shutil.copy2(txt_path, target_txt_path)
                      copied_files.append(target_txt_path.name)

          if not copied_files:
              print("::warning::没有找到匹配的文件！")
              exit(78)
          print("成功复制的文件：\\n" + "\\n".join(copied_files))
          EOF

      - name: Commit and push results
        run: |
          cd private-repo
          git config user.email "file-matcher@auto"
          git config user.name "File Matcher"
          file_count=$(find "$TARGET_DIR" -type f | wc -l)
          commit_msg="Auto: 找到并复制 $file_count 个匹配文件（包含 PDF 和 TXT）"
          
          git add "$TARGET_DIR"
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "$commit_msg"
            git push "https://x-access-token:${{ secrets.PAT }}@github.com/${{ secrets.PRIVATE_REPO }}.git" main
          fi
