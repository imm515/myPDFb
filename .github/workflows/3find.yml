name: 3find

on:
  workflow_dispatch:
    inputs:
      work_directory:
        description: "请输入工作目录名称 (例如: cb202508)。留空则从文件读取，若无则取上个月。"
        required: false
        type: string
      suffix:
        description: "可选后缀"
        required: false
        type: choice
        options:
          - ""
          - 伙食
  workflow_run:
    workflows: ["2name"]  # 依赖于 2name 工作流
    types:
      - completed

concurrency:
  group: ${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  file-matcher:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    runs-on: ubuntu-latest
    env:
      WORK_DIR_FILE: "${{ secrets.PRIVATE_DIR }}/myPDF工作目录.v"  # 工作目录配置文件路径

    steps:
      - name: Checkout private repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.PRIVATE_REPO }}
          token: ${{ secrets.PAT }}
          path: private-repo
          ref: main

      - name: Resolve WORK_DIR (inputs/file/default)
        id: read_work_dir
        run: |
          input_dir="${{ github.event.inputs.work_directory }}"
          suffix="${{ github.event.inputs.suffix }}"
          
          # 1) 优先使用手动输入；若无输入则尝试从文件读取；再无则默认上个月
          work_dir_name=""
          if [ -n "$input_dir" ]; then
            work_dir_name="$input_dir"
          elif [ -f "private-repo/$WORK_DIR_FILE" ]; then
            work_dir_name=$(grep -v -e '^#' -e '^$' "private-repo/$WORK_DIR_FILE" | head -n 1 | xargs)
          fi
          
          if [ -z "$work_dir_name" ]; then
            last_month=$(date -d "$(date +%Y-%m-15) -1 month" +%Y%m)
            work_dir_name="cb${last_month}"
          fi
          
          # 2) 处理后缀：仅当提供且未包含时追加
          if [ -n "$suffix" ] && [[ "$work_dir_name" != *"$suffix" ]]; then
            work_dir_name="${work_dir_name}${suffix}"
          fi
          
          # 3) 合法性校验：只允许 cbYYYYMM 或 cbYYYYMM伙食
          if [[ ! "$work_dir_name" =~ ^cb[0-9]{6}(伙食)?$ ]]; then
            echo "::error::目录名不合法：$work_dir_name，必须是 cbYYYYMM 或 cbYYYYMM伙食 格式"
            exit 1
          fi
          
          echo "::notice::最终工作目录：$work_dir_name"
          echo "WORK_DIR=${{ secrets.PRIVATE_DIR }}/$work_dir_name" >> $GITHUB_ENV

      - name: 使用工作目录
        run: |
          echo "✅ 工作目录是：$WORK_DIR"
          echo "SOURCE_DIR=$WORK_DIR/2name" >> $GITHUB_ENV
          echo "TARGET_DIR=$WORK_DIR/3查找" >> $GITHUB_ENV

      - name: 查找查找单号文件（无后缀或 .v 后缀）
        run: |
          # 只匹配相对于 private-repo 根的路径
          SEARCH_CANDIDATE_1="$WORK_DIR/#查找单号"
          SEARCH_CANDIDATE_2="$WORK_DIR/#查找单号.v"

          if [ -f "private-repo/$SEARCH_CANDIDATE_1" ]; then
            MATCHED_SEARCH="$SEARCH_CANDIDATE_1"
          elif [ -f "private-repo/$SEARCH_CANDIDATE_2" ]; then
            MATCHED_SEARCH="$SEARCH_CANDIDATE_2"
          else
            echo "::error::未找到查找单号文件。请确保存在：'$SEARCH_CANDIDATE_1' 或 '$SEARCH_CANDIDATE_2'"
            exit 1
          fi

          # 输出到环境变量
          echo "SEARCH_FILE=$MATCHED_SEARCH" >> $GITHUB_ENV
          echo "✅ 识别到查找单号文件：$MATCHED_SEARCH"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pymupdf

      - name: Initialize directories
        run: |
          cd private-repo
          # 清空旧目录
          rm -rf "$TARGET_DIR"
          echo "♻️ 已清空旧 3查找 目录：$TARGET_DIR"
          # 创建目标目录
          mkdir -p "$TARGET_DIR"

          # 检查查找单号文件是否存在（此时在 private-repo 下，SEARCH_FILE 为相对路径）
          if [ ! -f "$SEARCH_FILE" ]; then
            echo "::error::查找单号文件不存在：$SEARCH_FILE"
            exit 1
          fi

      - name: Process number matching
        run: |
          cd private-repo
          python3 <<EOF
          import os, re, shutil
          from pathlib import Path
          import fitz  # PyMuPDF

          source_dir = Path(os.getenv("SOURCE_DIR"))
          target_dir = Path(os.getenv("TARGET_DIR"))
          search_file = Path(os.getenv("SEARCH_FILE"))

          # 解析查找单号文件
          search_numbers = []
          with open(search_file, 'r') as f:
              for line in f:
                  line = line.strip()
                  if line.startswith('#') or not line:
                      continue
                  if '--' in line:
                      num = line.split('--')[-1].strip()
                  else:
                      num = line.split()[0].strip()
                  if num.isdigit():
                      search_numbers.append(f"{int(num):04d}")
          print(f"需要查找的编号：{search_numbers}")

          target_dir.mkdir(parents=True, exist_ok=True)

          copied_files = []
          for file_path in source_dir.glob('**/*.pdf'):
              match = re.match(r'^(\d{4})_', file_path.name)
              if not match:
                  continue
              file_num = match.group(1)
              if file_num in search_numbers:
                  pdf = fitz.open(file_path)
                  page = pdf.load_page(0)
                  rect = page.rect
                  font = fitz.Font("helv")
                  text = str(int(file_num))
                  text_length = font.text_length(text, fontsize=8)
                  pos = fitz.Point(rect.width - 10 - text_length, rect.height - 10)
                  page.insert_text(pos, text, fontname="helv", fontsize=8, color=(0.5,0.5,0.5))
                  tgt_pdf = target_dir / file_path.name
                  cnt = 1
                  while tgt_pdf.exists():
                      tgt_pdf = target_dir / f"{file_num}_{cnt:02d}{file_path.suffix}"
                      cnt += 1
                  pdf.save(tgt_pdf)
                  pdf.close()
                  copied_files.append(tgt_pdf.name)
                  txt_path = file_path.with_suffix('.txt')
                  if txt_path.exists():
                      tgt_txt = target_dir / txt_path.name
                      cnt = 1
                      while tgt_txt.exists():
                          tgt_txt = target_dir / f"{file_num}_{cnt:02d}{txt_path.suffix}"
                          cnt += 1
                      shutil.copy2(txt_path, tgt_txt)
                      copied_files.append(tgt_txt.name)

          print(f"\n成功复制 {len(copied_files)} 个文件：")
          print('\n'.join(copied_files))
          if not copied_files:
              print("::warning::没有找到匹配的文件！")
              exit(78)
          EOF

      - name: Commit and push results
        run: |
          cd private-repo
          git config user.email "file-matcher@auto"
          git config user.name "File Matcher"

          file_count=$(find "$TARGET_DIR" -type f | wc -l)
          commit_msg="Auto: 找到并复制 $file_count 个匹配文件（包含 PDF 和 TXT）"

          git add "$TARGET_DIR"
          if git diff --cached --quiet; then
            echo "No changes to commit. Skipping."
            exit 0
          fi
          git commit -m "$commit_msg"
          git push "https://x-access-token:${{ secrets.PAT }}@github.com/${{ secrets.PRIVATE_REPO }}.git" main
