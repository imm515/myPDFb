name: 11cut

on:
  workflow_dispatch:

jobs:
  process-pdf:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout public repo
        uses: actions/checkout@v4

      - name: Checkout private repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.PRIVATE_REPO }}
          token: ${{ secrets.PAT }}
          path: private-repo
          ref: main

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y poppler-utils python3-pip
          pip3 install PyMuPDF pillow

      - name: Clean 1cut directory
        run: |
          OUTPUT_DIR="private-repo/${{ secrets.PRIVATE_DIR }}/1cut"
          if [ -d "$OUTPUT_DIR" ]; then
            rm -rf "$OUTPUT_DIR"/*
          else
            mkdir -p "$OUTPUT_DIR"
          fi

      - name: List PDF files in private repo (root directory only)
        run: |
          find private-repo/${{ secrets.PRIVATE_DIR }} -maxdepth 1 -name "*.pdf" | sort > pdf_files.txt
          echo "Found PDF files:"
          cat pdf_files.txt

      - name: Extract text and convert PDF to PNG
        run: |
          # 初始化输出目录
          OUTPUT_DIR="private-repo/${{ secrets.PRIVATE_DIR }}/1cut"
          mkdir -p "$OUTPUT_DIR"
      
          # 将 Python 逻辑写入临时脚本
          cat << 'EOF' > process_pdf.py
          import fitz  # PyMuPDF
          import os
          import sys
          from PIL import Image  # 导入 Image 类

          pdf_path = sys.argv[1]
          output_dir = sys.argv[2]
          base_name = os.path.splitext(os.path.basename(pdf_path))[0]

          # 打开 PDF 文件
          doc = fitz.open(pdf_path)

          for page_num, page in enumerate(doc, 1):
              # 获取页面尺寸
              rect = page.rect
              w, h = rect.width, rect.height

              # 按上、中、下三部分提取文本
              for part_num, (part_name, (y0, y1)) in enumerate([
                  ("1top", (0, h/3)),
                  ("2mid", (h/3, 2*h/3)),
                  ("3bot", (2*h/3, h))
              ], 1):
                  # 定义文本提取区域
                  text_rect = fitz.Rect(0, y0, w, y1)
                  text = page.get_textbox(text_rect)
                  txt_path = f"{output_dir}/{base_name}_p{page_num}_{part_name}.txt"
                  with open(txt_path, "w", encoding="utf-8") as f:
                      f.write(text)

              # 将页面渲染为图像（PNG）
              pix = page.get_pixmap(matrix=fitz.Matrix(1.2, 1.2))  # 分辨率放大 1.2 倍
              img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)

              # 切割图像为上、中、下三部分
              w, h = img.size
              for part_num, (part_name, (y0, y1)) in enumerate([
                  ("1top", (0, h//3)),
                  ("2mid", (h//3, 2*h//3)),
                  ("3bot", (2*h//3, h))
              ], 1):
                  # 切割图像
                  crop = img.crop((0, y0, w, y1))
                  # 保存切割后的图像（PNG 格式）
                  img_path = f"{output_dir}/{base_name}_p{page_num}_{part_name}.png"
                  crop.save(img_path, "PNG")
          EOF
      
          # 读取 PDF 文件路径到数组中
          mapfile -t pdf_files < pdf_files.txt

          # 检查是否读取到文件
          if [ ${#pdf_files[@]} -eq 0 ]; then
            echo "No PDF files found!"
            exit 1
          fi

          # 循环处理每个 PDF 文件
          for pdf_path in "${pdf_files[@]}"; do
            echo "Processing: $pdf_path"
            python3 process_pdf.py "$pdf_path" "$OUTPUT_DIR"
          done

      - name: Commit and push to private repo
        run: |
          cd private-repo

          # 添加所有更改到暂存区
          git add .

          # 检查是否有 staged 的更改
          if git diff --cached --quiet; then
            echo "No staged changes to commit. Skipping commit and push."
            exit 0
          fi

          # 如果有 staged 的更改，则提交并推送
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          git commit -m "Auto: Extracted text and converted PDF to PNG"
          git push "https://x-access-token:${{ secrets.PAT }}@github.com/${{ secrets.PRIVATE_REPO }}.git" main
