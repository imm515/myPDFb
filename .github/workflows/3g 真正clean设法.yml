name: 3g 清理pdf

on:
  workflow_dispatch:

jobs:
  process-pdf:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout public repo
        uses: actions/checkout@v4

      - name: Checkout private repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.PRIVATE_REPO }}
          token: ${{ secrets.PAT }}
          path: private-repo
          ref: main

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y poppler-utils python3-pip
          pip3 install PyMuPDF pillow

      - name: Clean 1cut directory
        run: |
          OUTPUT_DIR="private-repo/${{ secrets.PRIVATE_DIR }}/1cut"
          if [ -d "$OUTPUT_DIR" ]; then
            rm -rf "$OUTPUT_DIR"/*
          else
            mkdir -p "$OUTPUT_DIR"
          fi

      - name: List PDF files in private repo (root directory only)
        run: |
          find private-repo/${{ secrets.PRIVATE_DIR }} -maxdepth 1 -name "*.pdf" | sort > pdf_files.txt
          echo "Found PDF files:"
          cat pdf_files.txt

      - name: Process PDF files and cut pages into three parts
        run: |
          # 初始化输出目录
          OUTPUT_DIR="private-repo/${{ secrets.PRIVATE_DIR }}/1cut"
          mkdir -p "$OUTPUT_DIR"

          # 将 Python 逻辑写入临时脚本
          cat << 'EOF' > process_pdf.py
          import fitz  # PyMuPDF
          import os
          import sys

          def process_pdf(pdf_path, output_dir):
              # 打开 PDF 文件
              doc = fitz.open(pdf_path)
              base_name = os.path.splitext(os.path.basename(pdf_path))[0]

              for page_num, page in enumerate(doc, 1):
                  # 获取页面尺寸（MediaBox）
                  media_box = page.rect
                  w, h = media_box.width, media_box.height

                  # 切割三部分
                  for part_num, (part_name, (y0, y1)) in enumerate([
                      ("1top", (0, h / 3)),
                      ("2mid", (h / 3, 2 * h / 3)),
                      ("3bot", (2 * h / 3, h))
                  ], 1):
                      # 定义裁切区域
                      crop_rect = fitz.Rect(0, y0, w, y1)

                      # 确保裁切区域在 MediaBox 范围内
                      if not media_box.contains(crop_rect):
                          print(f"Warning: CropBox for {part_name} is outside MediaBox. Adjusting...")
                          crop_rect = crop_rect.intersect(media_box)  # 将裁切区域限制在 MediaBox 内

                      # 创建一个新的 PDF 文档
                      new_doc = fitz.open()
                      new_page = new_doc.new_page(width=crop_rect.width, height=crop_rect.height)

                      # 将裁切区域插入到新页面
                      new_page.show_pdf_page(
                          fitz.Rect(0, 0, crop_rect.width, crop_rect.height),  # 目标区域
                          doc,  # 原始文档
                          page_num - 1,  # 原始页面索引（从 0 开始）
                          clip=crop_rect  # 裁切区域
                      )

                      # 设置裁切框并清理未显示的内容
                      new_page.set_cropbox(crop_rect)
                      new_page.clean_contents()

                      # 保存裁切后的 PDF
                      output_pdf_path = f"{output_dir}/{base_name}_p{page_num}_{part_name}.pdf"
                      new_doc.save(output_pdf_path, garbage=4, deflate=True)  # 清理未引用对象并压缩
                      new_doc.close()

                      # 提取对应区域的文本
                      text = page.get_textbox(crop_rect)
                      txt_path = f"{output_dir}/{base_name}_p{page_num}_{part_name}.txt"
                      with open(txt_path, "w", encoding="utf-8") as f:
                          f.write(text)

          if __name__ == "__main__":
              pdf_path = sys.argv[1]
              output_dir = sys.argv[2]
              process_pdf(pdf_path, output_dir)
          EOF

          # 处理每个 PDF 文件
          while IFS= read -r pdf_path; do
              echo "Processing: $pdf_path"
              python3 process_pdf.py "$pdf_path" "$OUTPUT_DIR"
          done < pdf_files.txt

      - name: Commit and push to private repo
        run: |
          cd private-repo
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          git add .
          git commit -m "Auto: Processed PDF images and extracted text"
          git push "https://x-access-token:${{ secrets.PAT }}@github.com/${{ secrets.PRIVATE_REPO }}.git" main
