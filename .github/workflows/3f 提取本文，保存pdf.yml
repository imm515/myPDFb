name: 3f PDF Split and Clean

on:
  workflow_dispatch:

jobs:
  process-pdf:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout public repo
        uses: actions/checkout@v4

      - name: Checkout private repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.PRIVATE_REPO }}
          token: ${{ secrets.PAT }}
          path: private-repo
          ref: main

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y poppler-utils python3-pip
          pip3 install PyMuPDF==1.23.0  # 确保版本支持 clean 特性

      - name: Clean output directory
        run: |
          OUTPUT_DIR="private-repo/${{ secrets.PRIVATE_DIR }}/1cut"
          mkdir -p "$OUTPUT_DIR"
          rm -rf "$OUTPUT_DIR"/*

      - name: Process PDF with clean=True
        run: |
          OUTPUT_DIR="private-repo/${{ secrets.PRIVATE_DIR }}/1cut"
          
          cat << 'EOF' > process_pdf.py
          import fitz
          import os
          import sys

          def split_pdf(pdf_path, output_dir):
              doc = fitz.open(pdf_path)
              base_name = os.path.splitext(os.path.basename(pdf_path))[0]

              for page_num in range(doc.page_count):
                  page = doc[page_num]
                  w, h = page.rect.width, page.rect.height

                  for part_name, y0, y1 in [
                      ("1top", 0, h/3),
                      ("2mid", h/3, 2*h/3),
                      ("3bot", 2*h/3, h)
                  ]:
                      new_doc = fitz.open()
                      new_doc.insert_pdf(doc, from_page=page_num, to_page=page_num)
                      new_page = new_doc[0]
                      new_page.set_cropbox(fitz.Rect(0, y0, w, y1))

                      # 提取文本
                      text = new_page.get_textbox(fitz.Rect(0, 0, w, y1 - y0))

                      output_pdf = f"{output_dir}/{base_name}_p{page_num+1}_{part_name}.pdf"
                      # 关键修改：添加 clean=True 参数
                      new_doc.save(output_pdf, deflate=True, clean=True)
                      new_doc.close()

                      # 保存文本
                      txt_path = f"{output_dir}/{base_name}_p{page_num+1}_{part_name}.txt"
                      with open(txt_path, "w", encoding="utf-8") as f:
                          f.write(text)

          if __name__ == "__main__":
              if len(sys.argv) != 3:
                  print("Usage: python process_pdf.py <input_pdf> <output_dir>")
                  sys.exit(1)
              split_pdf(sys.argv[1], sys.argv[2])
          EOF

          # 处理所有 PDF（支持文件名含空格）
          find "private-repo/${{ secrets.PRIVATE_DIR }}" -maxdepth 1 -name "*.pdf" -print0 | while IFS= read -r -d $'\0' pdf_path; do
              echo "Processing: $pdf_path"
              python3 process_pdf.py "$pdf_path" "$OUTPUT_DIR"
          done

      - name: Commit and push changes
        run: |
          cd private-repo
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          git add .
          git commit -m "Auto: PDF split with clean=True to remove hidden content"
          git push "https://x-access-token:${{ secrets.PAT }}@github.com/${{ secrets.PRIVATE_REPO }}.git" main
